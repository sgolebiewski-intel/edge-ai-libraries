# Copyright (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

services:
  vss-ui:
    environment:
      APP_SOCKET_APPEND: ${CONFIG_SOCKET_APPEND:-CONFIG_OFF}
      APP_SUMMARY_FEATURE: ${SUMMARY_FEATURE:-FEATURE_ON}
      APP_SEARCH_FEATURE: ${SEARCH_FEATURE:-FEATURE_OFF}

  pipeline-manager:
    depends_on:
      vlm-openvino-serving:
        condition: service_healthy
      video-ingestion:
        condition: service_healthy
      rabbitmq-service:
        condition: service_healthy
      audio-analyzer:
        condition: service_healthy
    environment:
      EVAM_HOST: ${EVAM_HOST}
      EVAM_DEVICE: ${EVAM_DEVICE}
      EVAM_PIPELINE_PORT: 8080
      EVAM_PUBLISH_PORT: 1883
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_AMQP_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      LLM_SUMMARIZATION_KEY: ""
      LLM_SUMMARIZATION_API: ${LLM_SUMMARIZATION_API}
      LLM_SUMMARIZATION_DEVICE: ${LLM_DEVICE}
      VLM_CAPTIONING_KEY: ""
      VLM_CAPTIONING_API: ${VLM_ENDPOINT}
      VLM_CAPTIONING_DEVICE: ${VLM_DEVICE}
      LLM_CONCURRENT: ${PM_LLM_CONCURRENT}
      VLM_CONCURRENT: ${PM_VLM_CONCURRENT}
      SUMMARIZATION_MAX_COMPLETION_TOKENS: ${PM_SUMMARIZATION_MAX_COMPLETION_TOKENS}
      CAPTIONING_MAX_COMPLETION_TOKENS: ${PM_CAPTIONING_MAX_COMPLETION_TOKENS}
      LLM_MODEL_API: ${LLM_MODEL_API}
      MULTI_FRAME_COUNT: ${PM_MULTI_FRAME_COUNT}
      AUDIO_HOST: ${AUDIO_ENDPOINT}
      AUDIO_DEVICE: CPU
      SEARCH_ENDPOINT: ""
      SEARCH_DATAPREP_ENDPOINT: ""
      SUMMARY_FEATURE: ${SUMMARY_FEATURE:-FEATURE_ON}
      SEARCH_FEATURE: ${SEARCH_FEATURE:-FEATURE_OFF}
      USE_OVMS: "${USE_OVMS_CONFIG:-CONFIG_OFF}"
      WORKERS: ${WORKERS:-1}

  vlm-openvino-serving:
    image: ${REGISTRY:-}vlm-openvino-serving:${TAG:-latest}
    ipc: host
    ports:
      - "${VLM_HOST_PORT}:8000"
    environment:
      no_proxy: ${no_proxy},${MINIO_HOST},localhost
      no_proxy_env: ${no_proxy},${MINIO_HOST}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      VLM_MODEL_NAME: ${VLM_MODEL_NAME}
      VLM_COMPRESSION_WEIGHT_FORMAT: ${VLM_COMPRESSION_WEIGHT_FORMAT}
      VLM_DEVICE: ${VLM_DEVICE}
      VLM_SEED: ${VLM_SEED}
      WORKERS: ${WORKERS:-1}
      HUGGINGFACE_TOKEN: ${HUGGINGFACE_TOKEN}
      OV_CONFIG: ${OV_CONFIG}
      VLM_LOG_LEVEL: ${VLM_LOG_LEVEL:-info}
      OPENVINO_LOG_LEVEL: ${VLM_OPENVINO_LOG_LEVEL:-1}
      VLM_ACCESS_LOG_FILE: ${VLM_ACCESS_LOG_FILE:-/dev/null}
    restart: unless-stopped
    devices:
      - ${DRI_MOUNT_PATH:-/dev/null}:/dev/dri
    group_add:
      - ${USER_GROUP_ID:-1000} 
      - ${VIDEO_GROUP_ID:-44}    
      - ${RENDER_GROUP_ID:-1002}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 60
      start_period: 60s
    volumes:
      - ov-models:/home/appuser/.cache/huggingface
      - ov-models:/app/ov-model
    networks:
      - vs_network

  ovms-service:
    image: openvino/model_server:2025.1
    profiles:
      - ovms
    environment:
      - no_proxy=${no_proxy},localhost
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
    ports:
      - "${OVMS_HTTP_HOST_PORT}:80"
      - "${OVMS_GRPC_HOST_PORT}:81"
    volumes:
      - "${OVMS_CONFIG_DIR}:/workspace:ro"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/v2/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    command:
      ["--port", "81", "--rest_port", "80", "--log_level", "DEBUG", "--config_path", "workspace/models/config.json"]
    networks:
      - vs_network

  video-ingestion:
    image: ${REGISTRY:-}video-ingestion:${TAG:-latest}
    read_only: true
    security_opt:
      - no-new-privileges
    privileged: false
    tty: true
    ports:
      - "${EVAM_PIPELINE_HOST_PORT}:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/pipelines || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 15s
    environment:
      no_proxy: ${no_proxy},${MINIO_HOST},${RABBITMQ_HOST},localhost
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: 1883
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      MINIO_SERVER: ${MINIO_HOST}:80
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      RUN_MODE: EVA
      # Default Detection and Classification Device
      DETECTION_DEVICE: ${EVAM_DEVICE}
      ADD_UTCTIME_TO_METADATA: true
      LSFEATURE_NAME: "EVAM"
      HTTPS: false # Make it "true" to enable SSL/TLS secure mode, mount the generated certificates
      MTLS_VERIFICATION: false # if HTTPS=true, enable/disable client certificate verification for mTLS
      # Append pipeline name to a publisher topic
      APPEND_PIPELINE_NAME_TO_PUBLISHER_TOPIC: false
      REST_SERVER_PORT: 8080
    entrypoint: ["./run.sh"]
    volumes:
      - "/run/udev:/run/udev:ro"
      - "/dev:/dev"
      - "/tmp:/tmp"
      - vol_evam_pipeline_root:/var/cache/pipeline_root:uid=1999,gid=1999
      - ${OV_MODEL_DIR}:/home/pipeline-server/models
    group_add:
      # render group ID for ubuntu 20.04 host OS
      - "109"
      # render group ID for ubuntu 22.04 host OS
      - "110"
    device_cgroup_rules:
      # Default run - device-cgroup-rule='c 189:* rmw'
      # Selective rules can be applied for deployment
      - "c 189:* rmw"
      - "c 209:* rmw"
      - "a 189:* rwm"
    devices:
      # Following devices under /dev filesystem will be needed based on usecase
      # dri - GPU
      # USB camera devices
      # Selective mount can be done for deployment as mounting whole /dev is not recommended
      - "/dev:/dev"
    networks:
      - vs_network

  audio-analyzer:
    image: ${REGISTRY:-}audio-analyzer:${TAG:-latest}
    hostname: audio-analyzer
    ports:
      - "${AUDIO_HOST_PORT}:8000"
    volumes:
      - audio_analyzer_data:/home/appuser/models
      - audio_analyzer_data:/home/appuser/data
      - ${DRI_MOUNT_PATH:-/dev/null}:/dev/dri
    environment:
      - http_proxy
      - https_proxy
      - no_proxy=$no_proxy,${MINIO_HOST},localhost
      - DEBUG=false
      - ENABLED_WHISPER_MODELS=${AUDIO_ENABLED_MODELS} # Comma-separated list of models to enable
      - MAX_FILE_SIZE=${AUDIO_MAX_FILE} # 300MB
      - USE_FP16=${USE_FP16:-true} # Use FP16 on GPUs
      - MINIO_ENDPOINT=${MINIO_HOST}:80
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - STORAGE_BACKEND=${STORAGE_BACKEND:-minio} # can be minio or local
    depends_on:
      minio-service:
        condition: service_healthy
    devices:
      - ${DRI_MOUNT_PATH:-/dev/null}:/dev/dri
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s
    networks:
      - vs_network

  rabbitmq-service:
    image: rabbitmq:3-management-alpine
    ports:
      - "${RABBITMQ_AMQP_HOST_PORT}:5672" # AMQP port
      - "${RABBITMQ_MANAGEMENT_UI_HOST_PORT}:15672" # Management UI
      - "${RABBITMQ_MQTT_HOST_PORT}:1883" # MQTT (TCP) port
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    environment:
      no_proxy: ${no_proxy},localhost
      http_proxy: $http_proxy
      https_proxy: $https_proxy
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    command: >
      sh -c "rabbitmq-plugins enable --offline rabbitmq_mqtt rabbitmq_web_mqtt && rabbitmq-server"
    volumes:
      - ${RABBITMQ_CONFIG}:/etc/rabbitmq/rabbitmq.conf
    networks:
      - vs_network

volumes:
  audio_analyzer_data:
    driver: local
  ov-models:
    driver: local
  vol_evam_pipeline_root:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
