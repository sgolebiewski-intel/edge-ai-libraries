[tool.poetry]
name = "audio-analyzer"
version = "0.1.0"
description = "A microservice for intelligent audio processing including speech transcription and audio event detection"
authors = []
readme = "README.md"
packages = [{include = "audio_analyzer"}]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.115.5"
uvicorn = "^0.32.1"
gunicorn = "^23.0.0"
python-multipart = "^0.0.18"
pydantic = "^2.11.5"
pydantic-settings = "^2.9.1"
setuptools = "^80.9.0"
transformers = "^4.51.3"
pywhispercpp = { git = "https://github.com/absadiki/pywhispercpp.git" }
moviepy = "^2.1.2"
aiofiles = "^23.2.1"
optimum-intel = "^1.24.0"
openvino-genai = "2025.1.0.0"
openvino = {version = "^2025.1.0.0.dev", extras = ["onnx", "pytorch"]}
minio = "^7.2.15"
huggingface-hub = {version = "^0.30.2", extras = ["hf_xet"]}
scipy = "^1.15.3"
torch = { version = "^2.7.0", source = "pytorch-cpu" }
torchvision = { version = "^0.22.0", source = "pytorch-cpu" }


[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
httpx = "^0.27.0"
pytest-asyncio = "^0.23.5"
black = "^24.1.1"
isort = "^5.13.2"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pytest-cov = "^4.1.0"
coverage = "^7.4.1"
pytest-mock = "^3.12.0"

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py39"]

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
markers = [
    "unit: marks test as a unit test",
    "integration: marks test as an integration test",
    "api: marks test as an API test"
]

[tool.coverage.run]
source = ["audio_analyzer"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
show_missing = true
fail_under = 80
